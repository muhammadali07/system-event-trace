// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: areacabang.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNewDataWilayah = `-- name: CreateNewDataWilayah :one
INSERT INTO ibent.areacabang (kode_wilayah, keterangan, tanggal_input, tanggal_perbarui, terminal_input, terminal_perbarui, user_input, user_perbarui, kode_wilayah_induk)
VALUES($1::varchar, $2::varchar, $3::datetime, $4::datetime, $5::varchar, $6::varchar, $7::varchar, $8::varchar, $9::varchar)
RETURNING kode_wilayah, keterangan, tanggal_input, tanggal_perbarui, terminal_input, terminal_perbarui, user_input, user_perbarui, kode_wilayah_induk
`

type CreateNewDataWilayahParams struct {
	KodeWilayah      string      `json:"kode_wilayah"`
	Keterangan       string      `json:"keterangan"`
	TanggalInput     interface{} `json:"tanggal_input"`
	TanggalPerbarui  interface{} `json:"tanggal_perbarui"`
	TerminalInput    string      `json:"terminal_input"`
	TerminalPerbarui string      `json:"terminal_perbarui"`
	UserInput        string      `json:"user_input"`
	UserPerbarui     string      `json:"user_perbarui"`
	KodeWilayahInduk string      `json:"kode_wilayah_induk"`
}

func (q *Queries) CreateNewDataWilayah(ctx context.Context, arg CreateNewDataWilayahParams) (IbentAreacabang, error) {
	row := q.db.QueryRow(ctx, createNewDataWilayah,
		arg.KodeWilayah,
		arg.Keterangan,
		arg.TanggalInput,
		arg.TanggalPerbarui,
		arg.TerminalInput,
		arg.TerminalPerbarui,
		arg.UserInput,
		arg.UserPerbarui,
		arg.KodeWilayahInduk,
	)
	var i IbentAreacabang
	err := row.Scan(
		&i.KodeWilayah,
		&i.Keterangan,
		&i.TanggalInput,
		&i.TanggalPerbarui,
		&i.TerminalInput,
		&i.TerminalPerbarui,
		&i.UserInput,
		&i.UserPerbarui,
		&i.KodeWilayahInduk,
	)
	return i, err
}

const deleteWilayahByKodeWilayah = `-- name: DeleteWilayahByKodeWilayah :many
delete from ibent.areacabang where kode_wilayah = $1
RETURNING kode_wilayah, keterangan, tanggal_input, tanggal_perbarui, terminal_input, terminal_perbarui, user_input, user_perbarui, kode_wilayah_induk
`

func (q *Queries) DeleteWilayahByKodeWilayah(ctx context.Context, kodeWilayah string) ([]IbentAreacabang, error) {
	rows, err := q.db.Query(ctx, deleteWilayahByKodeWilayah, kodeWilayah)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbentAreacabang{}
	for rows.Next() {
		var i IbentAreacabang
		if err := rows.Scan(
			&i.KodeWilayah,
			&i.Keterangan,
			&i.TanggalInput,
			&i.TanggalPerbarui,
			&i.TerminalInput,
			&i.TerminalPerbarui,
			&i.UserInput,
			&i.UserPerbarui,
			&i.KodeWilayahInduk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDetilWilayahByKodeWilayah = `-- name: GetDetilWilayahByKodeWilayah :many
select kode_wilayah, keterangan, tanggal_input, tanggal_perbarui, terminal_input, terminal_perbarui, user_input, user_perbarui, kode_wilayah_induk from ibent.areacabang a where a.kode_wilayah = $1
`

func (q *Queries) GetDetilWilayahByKodeWilayah(ctx context.Context, kodeWilayah string) ([]IbentAreacabang, error) {
	rows, err := q.db.Query(ctx, getDetilWilayahByKodeWilayah, kodeWilayah)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbentAreacabang{}
	for rows.Next() {
		var i IbentAreacabang
		if err := rows.Scan(
			&i.KodeWilayah,
			&i.Keterangan,
			&i.TanggalInput,
			&i.TanggalPerbarui,
			&i.TerminalInput,
			&i.TerminalPerbarui,
			&i.UserInput,
			&i.UserPerbarui,
			&i.KodeWilayahInduk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListWilayah = `-- name: GetListWilayah :many
select kode_wilayah, keterangan, tanggal_input, tanggal_perbarui, terminal_input, terminal_perbarui, user_input, user_perbarui, kode_wilayah_induk from ibent.areacabang a order by tanggal_input asc
`

func (q *Queries) GetListWilayah(ctx context.Context) ([]IbentAreacabang, error) {
	rows, err := q.db.Query(ctx, getListWilayah)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbentAreacabang{}
	for rows.Next() {
		var i IbentAreacabang
		if err := rows.Scan(
			&i.KodeWilayah,
			&i.Keterangan,
			&i.TanggalInput,
			&i.TanggalPerbarui,
			&i.TerminalInput,
			&i.TerminalPerbarui,
			&i.UserInput,
			&i.UserPerbarui,
			&i.KodeWilayahInduk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWilayahByKodeWilayah = `-- name: UpdateWilayahByKodeWilayah :many
update ibent.areacabang set kode_wilayah_induk = $1 where kode_wilayah = $2 
RETURNING kode_wilayah, keterangan, tanggal_input, tanggal_perbarui, terminal_input, terminal_perbarui, user_input, user_perbarui, kode_wilayah_induk
`

type UpdateWilayahByKodeWilayahParams struct {
	KodeWilayahInduk sql.NullString `json:"kode_wilayah_induk"`
	KodeWilayah      string         `json:"kode_wilayah"`
}

func (q *Queries) UpdateWilayahByKodeWilayah(ctx context.Context, arg UpdateWilayahByKodeWilayahParams) ([]IbentAreacabang, error) {
	rows, err := q.db.Query(ctx, updateWilayahByKodeWilayah, arg.KodeWilayahInduk, arg.KodeWilayah)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbentAreacabang{}
	for rows.Next() {
		var i IbentAreacabang
		if err := rows.Scan(
			&i.KodeWilayah,
			&i.Keterangan,
			&i.TanggalInput,
			&i.TanggalPerbarui,
			&i.TerminalInput,
			&i.TerminalPerbarui,
			&i.UserInput,
			&i.UserPerbarui,
			&i.KodeWilayahInduk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
